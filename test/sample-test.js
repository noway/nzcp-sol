const { expect } = require("chai");
const { ethers } = require("hardhat");
const { verifyPassURIOffline } = require("@vaxxnz/nzcp");
const {getToBeSigned} = require('../jslib/nzcp')

require('dotenv').config()

async function setupNZCP() {
  const NZCP = await ethers.getContractFactory("NZCP");
  const nzcp = await NZCP.deploy();
  await nzcp.deployed();
  return nzcp
}


const JackSparrow = ["Jack", "Sparrow", "1960-04-16"];

// Jack Sparrow example pass
const EXAMPLE_PASS = {
  ToBeSigned: "0x
  rs: ["0xD2E07B1DD7263D833166BDBB4F1A093837A905D7ECA2EE836B6B2ADA23C23154", "0xFBA88A529F675D6686EE632B09EC581AB08F72B458904BB3396D10FA66D11477",]
}

const BAD_PUBLIC_KEY_PASS = {
  ToBeSigned: "0x
  rs: ["0x743D91C84662FBBE80D3A3B6A3020B0D88E68C0B4236201D0D1D9555CC954B2D", "0x73C0653E01E6F60E1FF6F2125361C992682F2A88996775ED864787343EAC1CF4"]
}

const PUBLIC_KEY_NOT_FOUND_PASS = {
  ToBeSigned: "0x
  rs: ["0x4527172C800758199B4A92158B1F04C121CE98B21FC8DF723ED050A770B3E1F2", "0xA49E8B67D65369388465251272D0CC6DD63F4FD49684CA825D7DCC0EFE7E80E5"]
}

const MODIFIED_SIGNATURE_PASS = {
  ToBeSigned: "0x
  rs: ["0x00000000000000000000BDBB4F1A093837A905D7ECA2EE836B6B2ADA23C23154", "0xFBA88A529F675D6686EE632B09EC581AB08F72B458904BB3396D10FA66D11477"]
}

const MODIFIED_PAYLOAD_PASS = {
  ToBeSigned: "0x
  rs: ["0x00000000000000000000BDBB4F1A093837A905D7ECA2EE836B6B2ADA23C23154", "0xFBA88A529F675D6686EE632B09EC581AB08F72B458904BB3396D10FA66D11477"]
}

const EXPIRED_PASS = {
  ToBeSigned: "0x
  rs: ["0x59B85EDF92C4C1EAD34ECD2223A93FE37012913026E380F7169DE0912A0CAA8D", "0x75029863D917141CAAB0E8BE927DB5D93ECECB669DD72F81A82D2DA16306CE34"]
}

const NOT_ACTIVE_PASS = {
  ToBeSigned: "0x
  rs: ["0xF6A9A841A390A40BD5CEE4434CCCDB7499D9461840F5C8DFF436CBA0698B1AB2", "0x4DCA052720B9F581200BEBAC2FFF1AFA159CE42AEB38D558DF9413899DB48271"]
}

describe("NZCP - example pass ToBeSigned", function () {
  let nzcp;
  before(async function() {
    nzcp = await setupNZCP()
  })

  it("Should verify signature with NZCP example pubkey", async function () {
    // Jack Sparrow example pass
    const messageHash = "0x271CE33D671A2D3B816D788135F4343E14BC66802F8CD841FAAC939E8C11F3EE";
    const r = "0xD2E07B1DD7263D833166BDBB4F1A093837A905D7ECA2EE836B6B2ADA23C23154";
    const s = "0xFBA88A529F675D6686EE632B09EC581AB08F72B458904BB3396D10FA66D11477";
    expect(await nzcp.verifySign(messageHash, [r, s], 1)).to.equal(true);

  })

  it("Should parse credential subject in ToBeSigned", async function () {
    const result = await nzcp.readCredSubj(
      EXAMPLE_PASS.ToBeSigned, EXAMPLE_PASS.rs, 1)
    expect(result).to.deep.equal(JackSparrow);
  });

  it("Should fail BAD_PUBLIC_KEY_PASS", async function () {
    expect(
      nzcp.readCredSubj(
        BAD_PUBLIC_KEY_PASS.ToBeSigned, BAD_PUBLIC_KEY_PASS.rs, 1)
    ).to.be.revertedWith("InvalidSignature()");
  });

  it("Should parse PUBLIC_KEY_NOT_FOUND_PASS while violating spec", async function () {
    const result = await nzcp.readCredSubj(
      PUBLIC_KEY_NOT_FOUND_PASS.ToBeSigned, PUBLIC_KEY_NOT_FOUND_PASS.rs, 1);
    // We're deviating from the spec here, since NZ Ministry of Health is not going to issue passes with mismatching kid.
    expect(result).to.deep.equal(JackSparrow);
  });

  it("Should fail MODIFIED_SIGNATURE_PASS", async function () {
    expect(
      nzcp.readCredSubj(
        MODIFIED_SIGNATURE_PASS.ToBeSigned, MODIFIED_SIGNATURE_PASS.rs, 1)
    ).to.be.revertedWith("InvalidSignature()");
  });

  it("Should fail MODIFIED_PAYLOAD_PASS", async function () {
    expect(
      nzcp.readCredSubj(
        MODIFIED_PAYLOAD_PASS.ToBeSigned, MODIFIED_PAYLOAD_PASS.rs, 1)
    ).to.be.revertedWith("InvalidSignature()");
  });

  it("Should fail EXPIRED_PASS", async function () {
    expect(
      nzcp.readCredSubj(
        EXPIRED_PASS.ToBeSigned, EXPIRED_PASS.rs, 1)
    ).to.be.revertedWith("PassExpired()");
  });

  it("Should parse NOT_ACTIVE_PASS while violating spec", async function () {
    const result = await nzcp.readCredSubj(
      NOT_ACTIVE_PASS.ToBeSigned, NOT_ACTIVE_PASS.rs, 1);
    // Deviating from spec again, since NZ Ministry of Health is not going to issue passes which are not yet active.
    expect(result).to.deep.equal(JackSparrow);
  });
});


const

const

const

const

const

const

const

describe("NZCP - example pass URIs", function () {
  let nzcp;
  before(async function() {
    nzcp = await setupNZCP()
  })

  it("Should pass on EXAMPLE_PASS_URI", async function () {
    const pass = getToBeSigned(EXAMPLE_PASS_URI);
    expect(await nzcp.readCredSubj(pass.ToBeSigned, pass.rs, 1)).to.deep.equal(JackSparrow);
  });
  it("Should fail on BAD_PUBLIC_KEY_PASS_URI", async function () {
    const pass = getToBeSigned(BAD_PUBLIC_KEY_PASS_URI);
    expect(nzcp.readCredSubj(pass.ToBeSigned, pass.rs, 1)).to.be.revertedWith("InvalidSignature()")
  });
  it("Should fail on PUBLIC_KEY_NOT_FOUND_PASS_URI", async function () {
    const pass = getToBeSigned(PUBLIC_KEY_NOT_FOUND_PASS_URI);
    // We're deviating from the spec here, since NZ Ministry of Health is not going to issue passes with mismatching kid.
    expect(await nzcp.readCredSubj(pass.ToBeSigned, pass.rs, 1)).to.deep.equal(JackSparrow) 
  });
  it("Should fail on MODIFIED_SIGNATURE_PASS_URI", async function () {
    const pass = getToBeSigned(MODIFIED_SIGNATURE_PASS_URI);
    expect(nzcp.readCredSubj(pass.ToBeSigned, pass.rs, 1)).to.be.revertedWith("InvalidSignature()")
  });
  it("Should fail on MODIFIED_PAYLOAD_PASS_URI", async function () {
    const pass = getToBeSigned(MODIFIED_PAYLOAD_PASS_URI);
    expect(nzcp.readCredSubj(pass.ToBeSigned, pass.rs, 1)).to.be.revertedWith("InvalidSignature()")
  });
  it("Should fail on EXPIRED_PASS_URI", async function () {
    const pass = getToBeSigned(EXPIRED_PASS_URI);
    expect(nzcp.readCredSubj(pass.ToBeSigned, pass.rs, 1)).to.be.revertedWith("PassExpired()")
  });
  it("Should pass on NOT_ACTIVE_PASS_URI", async function () {
    const pass = getToBeSigned(NOT_ACTIVE_PASS_URI);
    // Deviating from spec again, since NZ Ministry of Health is not going to issue passes which are not yet active.
    expect(await nzcp.readCredSubj(pass.ToBeSigned, pass.rs, 1)).to.deep.equal(JackSparrow);
  });
})

const LIVE_PASS_URI_1 = process.env.LIVE_PASS_URI_1;
const LIVE_PASS_URI_2 = process.env.LIVE_PASS_URI_2;
const LIVE_PASS_URI_3 = process.env.LIVE_PASS_URI_3;

describe("NZCP - live pass URIs", function () {
  let nzcp;
  before(async function() {
    nzcp = await setupNZCP()
  })

  it("Should pass on LIVE_PASS_URI_1", async function () {
    const result = verifyPassURIOffline(LIVE_PASS_URI_1)
    const credSubj = [result.credentialSubject.givenName, result.credentialSubject.familyName, result.credentialSubject.dob]
    const pass = getToBeSigned(LIVE_PASS_URI_1);
    expect(await nzcp.readCredSubj(pass.ToBeSigned, pass.rs, 0)).to.deep.equal(credSubj);
  });
  if (LIVE_PASS_URI_2) {
    it("Should pass on LIVE_PASS_URI_2", async function () {
      const result = verifyPassURIOffline(LIVE_PASS_URI_2)
      const credSubj = [result.credentialSubject.givenName, result.credentialSubject.familyName, result.credentialSubject.dob]
      const pass = getToBeSigned(LIVE_PASS_URI_2);
      expect(await nzcp.readCredSubj(pass.ToBeSigned, pass.rs, 0)).to.deep.equal(credSubj);
    });
  }
  if (LIVE_PASS_URI_3) {
    it("Should pass on LIVE_PASS_URI_3", async function () {
      const result = verifyPassURIOffline(LIVE_PASS_URI_3)
      const credSubj = [result.credentialSubject.givenName, result.credentialSubject.familyName, result.credentialSubject.dob]
      const pass = getToBeSigned(LIVE_PASS_URI_3);
      expect(await nzcp.readCredSubj(pass.ToBeSigned, pass.rs, 0)).to.deep.equal(credSubj);
    });
  }
});